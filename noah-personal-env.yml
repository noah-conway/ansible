---
# Playbook to set up my own personal dev environment
# TODO:
# Setup & configure git - role
# Install graphics drivers - role
# Pull in nvim, tmux, and zsh configs
# Pipewire - role
# Set up de - role
# MPD - role
# Add new user ssh key into workstation ssh keys file
# WG module - last probably

- name: "Setting up personal environment for Noah"
  remote_user: otto
  hosts: archwks
  vars_prompt:
    - name: pass_change
      prompt: "Would you like to change the password for target user? (0/1)"
      private: false
      default: 0

    - name: password
      prompt: "Enter password for target user (skip if not changing)"
      private: true
      encrypt: sha512_crypt
      confirm: true
      salt_size: 7

    - name: audio_srv
      prompt: "Install an audio server?\n 1. Pipewire\n 2. None\n* enter 1 or 2"
      private: false
      default: 2

    - name: d_env
      prompt: "Install a desktop environment?\n 1. DWM\n 2. Gnome\n 3. None\n* enter 1, 2, or 3"
      private: false
      default: 3

    - name: wg_vpn
      prompt: "Install Wireguard VPN? (0/1)"
      private: false
      default: 0


  vars:
    target_user: noah
    xdg_config_home: "/home/{{ target_user }}/.config"
    git_config_dir: "/home/{{ target_user }}/.config/git"
    nvim_repo: "neovim"
    tmux_repo: "tmux"
    zsh_repo: "zsh"

  pre_tasks:
      # Create users defined in group vars
    - name: "Creating users"
      ansible.builtin.include_role:
        name: usr/create-user-loop

    # Checking to ensure user & home dir was created successfully
    - name: "Checking if target user '{{ target_user }}' exists"
      ansible.builtin.user:
        name: "{{ target_user }}"
      check_mode: true
      register: target_user_check

    - name: "Checking if target user '{{ target_user }}' has a home directory"
      ansible.builtin.stat:
        path: "/home/{{ target_user }}"
      register: target_home_check

    - name: debug
      ansible.builtin.debug:
        var: target_user_check

    - name: "Asserting target user '{{ target_user }}' exists"
      ansible.builtin.assert:
        that: 'target_user_check.state == "present" and target_home_check.stat.exists'

    # Assigning password to created user, defined in vars prompts
    - name: "Assigning password to {{ target_user }}"
      become: yes
      ansible.builtin.user:
        name: "{{ target_user }}"
        password: "{{ password }}"
      when: pass_change == "1" 

          
  tasks:
    # Ensuring Arch is up to date, and installing packages
    - name: "Pacman -Syu"
      become: yes
      community.general.pacman:
        upgrade: true
        update_cache: true

    - name: "Installing workstation packages"
      become: yes
      community.general.pacman:
        name: "{{ workstation_pkgs }}"
        state: latest

    # Enabling necessary services
    - name: "Enabling bluetooth.service"
      become: yes
      ansible.builtin.systemd_service:
        name: bluetooth.service
        enabled: true
        state: started

    - name: "Create XDG base directories"
      become: yes
      ansible.builtin.file:
        path: "/home/{{ target_user }}/{{ item }}"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: "0755"
        state: directory
      loop:
        - ".config"
        - ".cache"
        - ".local"

    - name: "Create XDG base directories in .local"
      become: yes
      ansible.builtin.file:
        path: "/home/{{ target_user }}/.local/{{ item }}"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: "0755"
        state: directory
      loop:
        - ".state"
        - ".share"

    # Configuring git
    - name: "Configuring git | creating git config directory"
      become: yes
      ansible.builtin.file:
        path: "{{ git_config_dir }}"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: "0755"
        state: directory

    - name: "Configuring git | creating git config file"
      become: yes
      become_user: "{{ target_user }}"
      ansible.builtin.file:
        path: "{{ git_config_dir }}/config"
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: "0644"
        state: touch

    - name: "Configuring git | checking for existing configuration"
      become: yes
      become_user: "{{ target_user }}"
      ansible.builtin.lineinfile:
        state: absent
        path: "{{ git_config_dir }}/config"
        regexp: '^\[user\]$'
      check_mode: true
      register: git_config_lif_check

    - name: "Configuring git | adding user header"
      become: yes
      become_user: "{{ target_user }}"
      ansible.builtin.lineinfile:
        path: "{{ git_config_dir }}/config"
        line: "[user]"
        state: present
        insertafter: "EOF"
      when: git_config_lif_check.found == 0

    - name: "Configuring git | clearing existing git configuration"
      become: yes
      become_user: "{{ target_user }}"
      ansible.builtin.lineinfile:
        path: "{{ git_config_dir }}/config"
        regex: "{{ item }}"
        state: absent
      loop:
        - '^\s*name\s*=\s*.*$'
        - '^\s*email\s*=\s*.*$'

    - name: "Configuring git | adding user.name and user.email"
      become: yes
      become_user: "{{ target_user }}"
      ansible.builtin.lineinfile:
        path: "{{ git_config_dir }}/config"
        line: "{{ item }}"
        state: present
        insertafter: '^\[user\]$'
      loop:
        - " email = {{ GIT_EMAIL }}"
        - " name = {{ GIT_USER }}"

    - name: "Retrieving {{ target_user }}'s public key"
      become: yes
      ansible.builtin.slurp:
        src: '/home/{{ target_user }}/.ssh/id_ed25519.pub'
      register: pubkey

    - name: "Adding {{ target_user }}'s key to {{ GIT_USER }}'s github account"
      community.general.github_key:
        name: "Access key for {{ target_user }}@{{ ansible_hostname }}"
        token: "{{ GITHUB_PAT }}"
        pubkey: "{{ pubkey['content'] | b64decode }}"

    - name: "Setting up ZSH configuration"
      become: yes
      ansible.builtin.include_role:
        name: usr/zsh
      vars:
        zsh_user: "{{ target_user }}"
        repo: "{{ GIT_SSH_URL }}/{{ zsh_repo }}.git"
        zsh_target_dir: "{{ xdg_config_home }}/zsh"

    
    - name: "Pulling ZSH configuration from {{ GIT_SSH_URL }}"
      become: yes
      become_user: "{{ target_user }}"
      ansible.builtin.git:
        repo: "{{ GIT_SSH_URL }}/{{ zsh_repo }}.git"
        dest: "{{ xdg_config_home }}/zsh"
        update: true
      when: "target_user_check.shell == '/bin/zsh'"

    - name: "Pulling Tmux configuration from {{ GIT_SSH_URL }}"
      become: yes
      become_user: "{{ target_user }}"
      ansible.builtin.git:
        repo: "{{ GIT_SSH_URL }}/{{ tmux_repo }}.git"
        dest: "{{ xdg_config_home }}/tmux"
        update: true
 
    - name: "Pulling Neovim configuration from {{ GIT_SSH_URL }}"
      become: yes
      become_user: "{{ target_user }}"
      ansible.builtin.git:
        repo: "{{ GIT_SSH_URL }}/{{ nvim_repo }}.git"
        dest: "{{ xdg_config_home }}/neovim"
        update: true

    

    
        


    

    





      
  
    
      


